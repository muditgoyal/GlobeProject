tableOutput("table")),
conditionalPanel(condition = "input.tabselected==2",
selectInput("select1", label = ("X-axis variable"),
choices = list("HW1" = "HW1", "HW2" = "HW2", "HW3" = "HW3", "HW4" = "HW4",
"HW5" = "HW5", "HW6" = "HW6", "HW7" = "HW7",
"HW8" = "HW8", "HW9" = "HW9", "Quiz1" = "QZ1", "Quiz2" = "QZ2", "Quiz3" = "QZ3",
"Quiz4" = "QZ4", "Test1" = "Test1", "Test2" = "Test2", "Lab" = "Lab", "Homework" = "Homework",
"Quiz" = "Quiz", "Overall" = "Overall"),
selected = "HW1"),
sliderInput("width", "Bin Width", min = 0, max = 10, value = 10)
#textInput("txt", summary_stats(tab$HW1))
),
conditionalPanel(condition = "input.tabselected==3",
selectInput("select2", label = ("X-axis variable"),
choices = list("HW1" = "HW1", "HW2" = "HW2", "HW3" = "HW3", "HW4" = "HW4",
"HW5" = "HW5", "HW6" = "HW6", "HW7" = "HW7",
"HW8" = "HW8", "HW9" = "HW9", "Quiz1" = "QZ1", "Quiz2" = "QZ2", "Quiz3" = "QZ3",
"Quiz4" = "QZ4", "Test1" = "Test1", "Test2" = "Test2", "Lab" = "Lab", "Homework" = "Homework",
"Quiz" = "Quiz", "Overall" = "Overall"),
selected = "Test1"),
selectInput("select3", label = ("Y-axis variable"),
choices = list("HW1" = "HW1", "HW2" = "HW2", "HW3" = "HW3", "HW4" = "HW4",
"HW5" = "HW5", "HW6" = "HW6", "HW7" = "HW7",
"HW8" = "HW8", "HW9" = "HW9", "Quiz1" = "QZ1", "Quiz2" = "QZ2", "Quiz3" = "QZ3",
"Quiz4" = "QZ4", "Test1" = "Test1", "Test2" = "Test2", "Lab" = "Lab", "Homework" = "Homework",
"Quiz" = "Quiz", "Overall" = "Overall"),
selected = "Overall"),
sliderInput("width2", "Opacity", min = 0, max = 1, value = 0.5),
radioButtons("scale", label = ("Show line"),
choices = list("none" = 1,
"lm" = 2,
"loess" = 3),
selected = 1)
) #condition closed
), #sidebar panel
#sidebar layout
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Barplot", value = 1, ggvisOutput("barplot")),
tabPanel("Histogram", value = 2, ggvisOutput("distPlot"),
h4("Summary Statistics"), verbatimTextOutput("summarystat")),
tabPanel("Scatterplot", value = 3, ggvisOutput("scatterplot"),
h4("Correlation"), verbatimTextOutput("correlate")),
id = "tabselected")
)#main panel
) #sideb
) #fluid page closed
# Define server logic required to draw a histogram
server <- function(input, output) {
vis_plot <- reactive({
# Normally we could do something like props(x = ~HW1, y = ~HW2),
# but since the inputs are strings, we need to do a little more work.
xvar <- prop("x", as.symbol(input$select1))
histogram <- tab %>%
ggvis(x = xvar) %>%
layer_histograms(stroke := 'white', width = input$width)
})
vis_plot %>% bind_shiny("distPlot")
output$summarystat <- renderPrint(print_stats(summary_stats(unlist(select(tab, input$select1), use.names = FALSE))))
vis_plot2 <- reactive({
# tab$Grade <- factor(tab$Grade, levels = tab$Grade)
histog <- tab %>%
ggvis(x = (~Grade)) %>%
layer_bars(fill := "blue") %>%
add_axis("x", title = "Grade") %>%
add_axis("y", title = "frequency") %>%
scale_ordinal('x', domain = c("A+", "A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D", "F"))
})
vis_plot2 %>% bind_shiny("barplot")
output$correlate <- renderPrint(cat(cor(x=select(tab, input$select2), y = select(tab, input$select3))))
output$table <-  renderTable({head(myTable, n = nrow(myTable))}, align = "c")
vis_plot3 <- reactive({
xvar <- prop("x", as.symbol(input$select2))
yvar <- prop("y", as.symbol(input$select3))
if (input$scale == 1){
tab %>%
ggvis(x = xvar, y = yvar) %>%
layer_points(fillOpacity := input$width2)
}
else if (input$scale == 2){
tab %>%
ggvis(x = xvar, y = yvar) %>%
layer_points(fillOpacity := input$width2) %>%
layer_model_predictions(model = "lm")
}
else{
tab %>%
ggvis(x = xvar, y = yvar) %>%
layer_points(fillOpacity := input$width2) %>%
layer_smooths()
}
})
vis_plot3 %>% bind_shiny("scatterplot")
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggvis)
source("code/functions.R")
library(readr)
library(dplyr)
library(ggvis)
tab <- read.csv('data/cleandata/cleanscores.csv')
tab
(tab$Grade)
myTable <- data.frame(table(tab$Grade))
myTable$Prop <- prop.table(myTable$Freq)
colnames(myTable) <- c("Grade", "Freq", "Prop")
ordering <- c("A+", "A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D", "F")
myTable <- myTable[match(ordering, myTable$Grade),]
plotType <- function(type){
switch(EXP = "tab %>%
ggvis(x = xvar, y = yvar) %>%
layer_points(fillOpacity := input$width2) ", none = "", lm = "%>% layer_model_predictions(model = 'lm')",
lowess = "%>% layer_smooths()")
}
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Grade Visualizer"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
conditionalPanel(condition = "input.tabselected==1",h3("Grades Distribution"),
tableOutput("table")),
conditionalPanel(condition = "input.tabselected==2",
selectInput("select1", label = ("X-axis variable"),
choices = list("HW1" = "HW1", "HW2" = "HW2", "HW3" = "HW3", "HW4" = "HW4",
"HW5" = "HW5", "HW6" = "HW6", "HW7" = "HW7",
"HW8" = "HW8", "HW9" = "HW9", "Quiz1" = "QZ1", "Quiz2" = "QZ2", "Quiz3" = "QZ3",
"Quiz4" = "QZ4", "Test1" = "Test1", "Test2" = "Test2", "Lab" = "Lab", "Homework" = "Homework",
"Quiz" = "Quiz", "Overall" = "Overall"),
selected = "HW1"),
sliderInput("width", "Bin Width", min = 0, max = 10, value = 10)
#textInput("txt", summary_stats(tab$HW1))
),
conditionalPanel(condition = "input.tabselected==3",
selectInput("select2", label = ("X-axis variable"),
choices = list("HW1" = "HW1", "HW2" = "HW2", "HW3" = "HW3", "HW4" = "HW4",
"HW5" = "HW5", "HW6" = "HW6", "HW7" = "HW7",
"HW8" = "HW8", "HW9" = "HW9", "Quiz1" = "QZ1", "Quiz2" = "QZ2", "Quiz3" = "QZ3",
"Quiz4" = "QZ4", "Test1" = "Test1", "Test2" = "Test2", "Lab" = "Lab", "Homework" = "Homework",
"Quiz" = "Quiz", "Overall" = "Overall"),
selected = "Test1"),
selectInput("select3", label = ("Y-axis variable"),
choices = list("HW1" = "HW1", "HW2" = "HW2", "HW3" = "HW3", "HW4" = "HW4",
"HW5" = "HW5", "HW6" = "HW6", "HW7" = "HW7",
"HW8" = "HW8", "HW9" = "HW9", "Quiz1" = "QZ1", "Quiz2" = "QZ2", "Quiz3" = "QZ3",
"Quiz4" = "QZ4", "Test1" = "Test1", "Test2" = "Test2", "Lab" = "Lab", "Homework" = "Homework",
"Quiz" = "Quiz", "Overall" = "Overall"),
selected = "Overall"),
sliderInput("width2", "Opacity", min = 0, max = 1, value = 0.5),
radioButtons("scale", label = ("Show line"),
choices = list("none" = 1,
"lm" = 2,
"loess" = 3),
selected = 1)
) #condition closed
), #sidebar panel
#sidebar layout
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Barplot", value = 1, ggvisOutput("barplot")),
tabPanel("Histogram", value = 2, ggvisOutput("distPlot"),
h4("Summary Statistics"), verbatimTextOutput("summarystat")),
tabPanel("Scatterplot", value = 3, ggvisOutput("scatterplot"),
h4("Correlation"), verbatimTextOutput("correlate")),
id = "tabselected")
)#main panel
) #sideb
) #fluid page closed
# Define server logic required to draw a histogram
server <- function(input, output) {
vis_plot <- reactive({
# Normally we could do something like props(x = ~HW1, y = ~HW2),
# but since the inputs are strings, we need to do a little more work.
xvar <- prop("x", as.symbol(input$select1))
histogram <- tab %>%
ggvis(x = xvar) %>%
layer_histograms(stroke := 'white', width = input$width)
})
vis_plot %>% bind_shiny("distPlot")
output$summarystat <- renderPrint(print_stats(summary_stats(unlist(select(tab, input$select1), use.names = FALSE))))
vis_plot2 <- reactive({
# tab$Grade <- factor(tab$Grade, levels = tab$Grade)
histog <- tab %>%
ggvis(x = (~Grade)) %>%
layer_bars(fill := "blue") %>%
add_axis("x", title = "Grade") %>%
add_axis("y", title = "frequency") %>%
scale_ordinal('x', domain = c("A+", "A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D", "F"))
})
vis_plot2 %>% bind_shiny("barplot")
output$correlate <- renderPrint(cat(cor(x=select(tab, input$select2), y = select(tab, input$select3))))
output$table <-  renderTable({head(myTable, n = nrow(myTable))}, align = "c")
vis_plot3 <- reactive({
xvar <- prop("x", as.symbol(input$select2))
yvar <- prop("y", as.symbol(input$select3))
if (input$scale == 1){
tab %>%
ggvis(x = xvar, y = yvar) %>%
layer_points(fillOpacity := input$width2)
}
else if (input$scale == 2){
tab %>%
ggvis(x = xvar, y = yvar) %>%
layer_points(fillOpacity := input$width2) %>%
layer_model_predictions(model = "lm")
}
else{
tab %>%
ggvis(x = xvar, y = yvar) %>%
layer_points(fillOpacity := input$width2) %>%
layer_smooths()
}
})
vis_plot3 %>% bind_shiny("scatterplot")
}
# Run the application
shinyApp(ui = ui, server = server)
[1, 2, 3]
[1 2 3]
{1 2 3}
{1, 2, 3}
{1}
1
---
title: "R Final Exam Studying"
output: html_notebook
---
# This is a comment
player <- c('Thompson', 'Curry', 'Green', 'Durant', 'Iguodala')
# field goals
goals <- c(644, 675, 272, 551, 219)
# salary (dollars)
salary <- c(16663575, 12112359, 15330435, 26540100, 11131368)
plot(goals, salary)
---
title: "R Final Exam Studying"
output: html_notebook
---
# This is a comment
player <- c('Thompson', 'Curry', 'Green', 'Durant', 'Iguodala')
# field goals
goals <- c(644, 675, 272, 551, 219)
# salary (dollars)
salary <- c(16663575, 12112359, 15330435, 26540100, 11131368)
plot(goals, salary)
---
title: "R Final Exam Studying"
output: html_notebook
---
# This is a comment
player <- c('Thompson', 'Curry', 'Green', 'Durant', 'Iguodala')
# field goals
goals <- c(644, 675, 272, 551, 219)
# salary (dollars)
salary <- c(16663575, 12112359, 15330435, 26540100, 11131368)
plot(goals, salary)
################################################################
# Computers treat all kinds of data in binary format.
# Different data types:
# Integers (whole numbers), Real (decimal numbers), Boolean (logical),
# Characters -> strings.
# typeof(___) returns the data type
c(2, 1) + c(1, 2, 3)
c(1, 2)
c(1, 2) + c(2, 3, 4)
player
player <- c('Thompson', 'Curry', 'Green', 'Durant', 'Iguodala')
player[4]
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"
abalone <- read.table(url, sep = ",")
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"
abalone <- read.table(url, sep = ",")
head(abalone)
str(abalone)
head(abalone)
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"
abalone <- read.table(url, sep = ",")
head(abalone)
str(abalone)
col_names <- c(
'sex',
'length',
'diameter',
'height',
'whole_weight',
'shucked_weight',
'viscera_weight',
'shell_weight',
'rings'
)
# vector of data types (for each column)
col_types <- c(
'factor',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'integer'
)
abalone
summary(abalone)
?read.table
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# reading the data
df <- read.csv("/Users/Mudit/Documents/Recruiting Fall 2018/indeed_product_science_homework/homework_data_set.csv")
")
names(df)
df
names(df)
# reading the data
df <- read.csv("/Users/Mudit/Documents/Recruiting Fall 2018/indeed_product_science_homework/homework_data_set.csv")
names(df)
df$revenue[is.na(df$revenue)]=0
num_leads <- nrow(df)
print(num_leads)
num_leads_assigned <- table(df$assigned)
names(num_leads_assigned) <- c("Not assigned", "Assigned")
print(num_leads_assigned)
assigned <- df[df$assigned==1,]
unassigned <- df[df$assigned=0,]
assigned <- df[df$assigned==1,]
unassigned <- df[df$assigned==0,]
average_rev <- as.numeric(aggregate(revenue~assigned, df, FUN=mean)[2][,1])
names(average_rev) <- c("Unassigned", "Assigned")
barplot(average_rev, main="Avg. Revenue, seperated by Assignment", xlab="Assignment", ylab = "Dollars")
average_rev
print(average_rev)
barplot(average_rev, main="Avg. Revenue, seperated by Assignment",
xlab="Assignment", ylab = "Dollars")
plot(df$age, df$revenue, main="Revenue v. Age", ylab="Revenue", xlab = "Age in days")
df <= df[order(df$age), ]
df$cumulative_revenue <- cumsum(df$revenue)
plot(df$age, df$cumulative_revenue, main="Cumulative Rev /age of Acct",
ylab = "Cum. Revenue", xlab="Age in days")
revenue_model <- lm(df$revenue~df$assigned)
summary(revenue_model)
modeling_it_all <- lm(df$revenue~dataset$advertiser_id+df$assigned+as.integer(df$date_assignment_starts)+as.integer(df$date_assignment_ends)+as.integer(df$first_revenue_date)+as.integer(df$date_created)+df$age+df$assign_days)
modeling_it_all <- lm(df$revenue~df$advertiser_id+df$assigned+as.integer(df$date_assignment_starts)+as.integer(df$date_assignment_ends)+as.integer(df$first_revenue_date)+as.integer(df$date_created)+df$age+df$assign_days)
summary(all_mod)
modeling_it_all <- lm(df$revenue~df$advertiser_id+df$assigned+as.integer(df$date_assignment_starts)+as.integer(
df$date_assignment_ends)+as.integer(
df$first_revenue_date)+as.integer(df$date_created)+df$age+df$assign_days)
summary(modeling_it_all)
df<- df[order(df$first_revenue_date), ]
df$cumulative_revenue <- cumsum(df$revenue)
unassigned <- unassigned[order(unassigned$first_revenue_date), ]
unassigned$
df<- df[order(df$first_revenue_date), ]
df$cumulative_revenue <- cumsum(df$revenue)
unassigned <- unassigned[order(unassigned$first_revenue_date), ]
unassigned$cumulative_revenue <- cumsum(unassigned$revenue)
assigned <- assigned[order(assigned$first_revenue_date), ]
assigned$cumulative_revenue <- cumsum(assigned$revenue)
plot(dataset$first_revenue_date,dataset$rev_cumsum, main="Cum. Revenue, plotted by first revenue date", xlab="First Revenue Date", ylab="Cumulative Revenue")
df<- df[order(df$first_revenue_date), ]
df$cumulative_revenue <- cumsum(df$revenue)
unassigned <- unassigned[order(unassigned$first_revenue_date), ]
unassigned$cumulative_revenue <- cumsum(unassigned$revenue)
assigned <- assigned[order(assigned$first_revenue_date), ]
assigned$cumulative_revenue <- cumsum(assigned$revenue)
plot(df$first_revenue_date, df$cumulative_revenue, main="Cum. Revenue, plotted by first revenue date", xlab="First Revenue Date", ylab="Cumulative Revenue")
lines(unassigned$first_revenue_date,unassigned$cumulative_revenue, col='red')
lines(data_assigned$first_revenue_date,data_assigned$cumulative_revenue, col='blue')
df<- df[order(df$first_revenue_date), ]
df$cumulative_revenue <- cumsum(df$revenue)
unassigned <- unassigned[order(unassigned$first_revenue_date), ]
unassigned$cumulative_revenue <- cumsum(unassigned$revenue)
assigned <- assigned[order(assigned$first_revenue_date), ]
assigned$cumulative_revenue <- cumsum(assigned$revenue)
plot(df$first_revenue_date, df$cumulative_revenue, main="Cum. Revenue, plotted by first revenue date", xlab="First Revenue Date", ylab="Cumulative Revenue")
lines(unassigned$first_revenue_date,unassigned$cumulative_revenue, col='red')
lines(assigned$first_revenue_date,assigned$cumulative_revenue, col='blue')
legend(0,100000000000,c("Total cumulative revenue","Assigned cumulative revenue","Unassigned cumulative revenue"), lty=c(1,1), lwd=c(2.5,2.5,2.5), col=c("black","blue","red"))
df<- df[order(df$first_revenue_date), ]
df$cumulative_revenue <- cumsum(df$revenue)
unassigned <- unassigned[order(unassigned$first_revenue_date), ]
unassigned$cumulative_revenue <- cumsum(unassigned$revenue)
assigned <- assigned[order(assigned$first_revenue_date), ]
assigned$cumulative_revenue <- cumsum(assigned$revenue)
plot(df$first_revenue_date, df$cumulative_revenue, main="Cum. Revenue, plotted by first revenue date", xlab="First Revenue Date", ylab="Cumulative Revenue")
lines(unassigned$first_revenue_date,unassigned$cumulative_revenue, col='red')
lines(assigned$first_revenue_date,assigned$cumulative_revenue, col='blue')
legend(0,100000000000,c("Total cumulative revenue","Assigned Leads Rev","Unassigned Leads Rev"), lty=c(1,1), lwd=c(2, 2, 2), col=c("red","blue","black"))
df<- df[order(df$first_revenue_date), ]
df$cumulative_revenue <- cumsum(df$revenue)
unassigned <- unassigned[order(unassigned$first_revenue_date), ]
unassigned$cumulative_revenue <- cumsum(unassigned$revenue)
assigned <- assigned[order(assigned$first_revenue_date), ]
assigned$cumulative_revenue <- cumsum(assigned$revenue)
plot(df$first_revenue_date, df$cumulative_revenue, main="Cum. Revenue, plotted by first revenue date", xlab="First Revenue Date", ylab="Cumulative Revenue")
lines(unassigned$first_revenue_date,unassigned$cumulative_revenue, col='red')
lines(assigned$first_revenue_date,assigned$cumulative_revenue, col='blue')
legend(0,100000000000,c("Total cumulative revenue","Assigned Leads","Unassigned cumulative revenue"), lty=c(1,1), lwd=c(2.5,2.5,2.5), col=c("black","blue","red"))
df<- df[order(df$first_revenue_date), ]
df$cumulative_revenue <- cumsum(df$revenue)
unassigned <- unassigned[order(unassigned$first_revenue_date), ]
unassigned$cumulative_revenue <- cumsum(unassigned$revenue)
assigned <- assigned[order(assigned$first_revenue_date), ]
assigned$cumulative_revenue <- cumsum(assigned$revenue)
plot(df$first_revenue_date, df$cumulative_revenue, main="Cum. Revenue, plotted by first revenue date", xlab="First Revenue Date", ylab="Cumulative Revenue")
lines(unassigned$first_revenue_date,unassigned$cumulative_revenue, col='red')
lines(assigned$first_revenue_date,assigned$cumulative_revenue, col='blue')
legend(0,100000000000,c("Total cumulative revenue","Assigned Leads Rev","Unassigned Leads Rev"), lty=c(1,1), lwd=c(2, 2,z), col=c("red","blue","black"))
df<- df[order(df$first_revenue_date), ]
df$cumulative_revenue <- cumsum(df$revenue)
unassigned <- unassigned[order(unassigned$first_revenue_date), ]
unassigned$cumulative_revenue <- cumsum(unassigned$revenue)
assigned <- assigned[order(assigned$first_revenue_date), ]
assigned$cumulative_revenue <- cumsum(assigned$revenue)
plot(df$first_revenue_date, df$cumulative_revenue, main="Cum. Revenue, plotted by first revenue date", xlab="First Revenue Date", ylab="Cumulative Revenue")
lines(unassigned$first_revenue_date,unassigned$cumulative_revenue, col='red')
lines(assigned$first_revenue_date,assigned$cumulative_revenue, col='blue')
legend(0,100000000000,c("Total cumulative revenue","Assigned Leads Rev","Unassigned Leads Rev"), lty=c(1,1), lwd=c(2, 2, 2), col=c("red","blue","black"))
df<- df[order(df$first_revenue_date), ]
df$cumulative_revenue <- cumsum(df$revenue)
unassigned <- unassigned[order(unassigned$first_revenue_date), ]
unassigned$cumulative_revenue <- cumsum(unassigned$revenue)
assigned <- assigned[order(assigned$first_revenue_date), ]
assigned$cumulative_revenue <- cumsum(assigned$revenue)
plot(df$first_revenue_date, df$cumulative_revenue, main="Cum. Revenue, plotted by first revenue date", xlab="First Revenue Date", ylab="Cumulative Revenue")
lines(unassigned$first_revenue_date,unassigned$cumulative_revenue, col='red')
lines(assigned$first_revenue_date,assigned$cumulative_revenue, col='blue')
legend(0,100000000000,c("Total cumulative revenue","Assigned Leads Rev","Unassigned Leads Rev"), lty=c(1,1), lwd=c(2.5,2.5,2.5), col=c("black","blue","red"))
df<- df[order(df$first_revenue_date), ]
df$cumulative_revenue <- cumsum(df$revenue)
unassigned <- unassigned[order(unassigned$first_revenue_date), ]
unassigned$cumulative_revenue <- cumsum(unassigned$revenue)
assigned <- assigned[order(assigned$first_revenue_date), ]
assigned$cumulative_revenue <- cumsum(assigned$revenue)
plot(df$first_revenue_date, df$cumulative_revenue, main="Cum. Revenue, plotted by first revenue date", xlab="First Revenue Date", ylab="Cumulative Revenue")
lines(unassigned$first_revenue_date,unassigned$cumulative_revenue, col='red')
lines(assigned$first_revenue_date,assigned$cumulative_revenue, col='blue')
legend(0,10000000000,c("Total cumulative revenue","Assigned Leads Rev","Unassigned Leads Rev"), lty=c(1,1), lwd=c(2,2,2), col=c("black","blue","red"))
df<- df[order(df$first_revenue_date), ]
df$cumulative_revenue <- cumsum(df$revenue)
unassigned <- unassigned[order(unassigned$first_revenue_date), ]
unassigned$cumulative_revenue <- cumsum(unassigned$revenue)
assigned <- assigned[order(assigned$first_revenue_date), ]
assigned$cumulative_revenue <- cumsum(assigned$revenue)
plot(df$first_revenue_date, df$cumulative_revenue, main="Cum. Revenue, plotted by first revenue date", xlab="First Revenue Date", ylab="Cumulative Revenue")
lines(unassigned$first_revenue_date,unassigned$cumulative_revenue, col='red')
lines(assigned$first_revenue_date,assigned$cumulative_revenue, col='blue')
legend(0,1000000000000,c("Total cumulative revenue","Assigned Leads Rev","Unassigned Leads Rev"), lty=c(1,1), lwd=c(2,2,2), col=c("black","blue","red"))
df<- df[order(df$first_revenue_date), ]
df$cumulative_revenue <- cumsum(df$revenue)
unassigned <- unassigned[order(unassigned$first_revenue_date), ]
unassigned$cumulative_revenue <- cumsum(unassigned$revenue)
assigned <- assigned[order(assigned$first_revenue_date), ]
assigned$cumulative_revenue <- cumsum(assigned$revenue)
plot(df$first_revenue_date, df$cumulative_revenue, main="Cum. Revenue, plotted by first revenue date", xlab="First Revenue Date", ylab="Cumulative Revenue")
lines(unassigned$first_revenue_date,unassigned$cumulative_revenue, col='red')
lines(assigned$first_revenue_date,assigned$cumulative_revenue, col='blue')
legend(0,100000000000,c("Total cumulative revenue","Assigned Leads Rev","Unassigned Leads Rev"), lty=c(1,1), lwd=c(2,2,2), col=c("black","blue","red"))
plot(df$age, df$revenue, main="Revenue v. Age", ylab="Revenue", xlab = "Age in days")
df <- df[order(df$age), ]
df$cumulative_revenue <- cumsum(df$revenue)
getwd()
setwd("Users/Mudit/Documents")
setwd("../Documents")
setwd("/Documents")
setwd("~/Documents")
setwd("~/Research/")
setwd("~/Research/")
getwd()
setwd("~/Research/YC")
setwd("~/Research/")
setwd("~/Research")
setwd(~/)
setwd("~/")
getwd()
setwd("~/Documents/Research/")
setwd()
getwd()
setwd("~/YC/Globe/data/")
setwd("~/YC/Globe/data")
setwd("~/YC/Globe/data/"
)
getwd()
setwd()
setwd("~/")
getwd()
setwd(~/Documents/Research/YC/Globe/data/)
setwd("~/Documents/Research/YC/Globe/data/")
ls
getwd()
write.table(read.spss("CEO_CLT.sav"), file="from_sav_data.csv", quote = FALSE, sep = ",")
library(foreign)
"
"
write.table(read.spss("CEO_CLT.sav"), file="from_sav_data.csv", quote = FALSE, sep = ",")
write.table(read.spss("CEO_CLT.sav"), file="CEO_CLT.csv", quote = FALSE, sep = ",")
library(foreign)
write.table(read.spss("Agg_C_Survey_10_1_12.sav"), file="Agg_C_Survey_10_1_12.csv", quote = FALSE, sep = ",")
library(foreign)
write.table(read.spss("C_Survey_All_Data_06_23_11Revised.sav"), file="C_Survey_All_Data_06_23_11Revised.csv", quote = FALSE, sep = ",")
library(foreign)
write.table(read.spss("D_Survey_All_Data_06_23_11.sav"), file="D_Survey_All_Data_06_23_11.csv", quote = FALSE, sep = ",")
library(foreign)
write.table(read.spss("D_Survey_All_Data_06_23_11Revised.sav"), file="D_Survey_All_Data_06_23_11Revised.csv", quote = FALSE, sep = ",")
library(foreign)
write.table(read.spss("E Survey All Data - 06 22 11RECODED.sav"), file="E Survey All Data - 06 22 11RECODED.csv", quote = FALSE, sep = ",")
library(foreign)
write.table(read.spss("Phoenix GLOBE CEO Book 3 May 2011.sav"), file="Phoenix GLOBE CEO Book 3 May 2011.csv", quote = FALSE, sep = ",")
